# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16pMCXvSwadllDWXmI56fuLh8wR4aNuJ5
"""

pip install python-telegram-bot==13.15

!pip install mysql-connector-python python-telegram-bot

from telegram import ReplyKeyboardMarkup, KeyboardButton

import mysql.connector

# MySQL database configuration
DB_HOST = 'sql7.freemysqlhosting.net'
DB_USER = 'sql7620547'
DB_PASSWORD = 'XtaT4vXkKU'
DB_NAME = 'sql7620547'

# Create a connection to the database
cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)

# Create a cursor object to execute SQL commands
cursor = cnx.cursor()

# Execute the SQL command to createthe "items" table
cursor.execute('''
    CREATE TABLE items (
        name varchar(255) NOT NULL,
        available tinyint(1) NOT NULL,
        PRIMARY KEY (name)
    )
''')

# Commit the changes to the database
cnx.commit()

# Close the cursor and database connection
cursor.close()
cnx.close()

print("Table created successfully!")

# Import required libraries
import mysql.connector
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from functools import wraps

# Replace with your bot token
TOKEN = '6066741972:AAGYCMd4uwG7A-f5iYRniE5N3SrAMddiuV0'

# MySQL database configuration
DB_HOST = 'sql7.freemysqlhosting.net'
DB_USER = 'sql7620547'
DB_PASSWORD = 'XtaT4vXkKU'
DB_NAME = 'sql7620547'

# Define the user IDs of users who are allowed to add, delete and modify items
ADMIN_IDS = set([5377424230, 987654321])

# Define a decorator to restrict access to certain commands
def restricted(func):
    @wraps(func)
    def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            update.message.reply_text("Sorry, you're not authorized to use this command.")
            return

        return func(update, context, *args, **kwargs)

    return wrapped

def check_item(name, cursor):
    cursor.execute('SELECT available FROM items WHERE name = %s', (name,))
    result = cursor.fetchone()
    if result is None:
        return "Item not found."
    elif result[0] == 1:
        return "Available."
    else:
        return "Not available."

# Define a function to add a new item as not available
@restricted
def add_item(update, context):
    name = context.args[0]
    cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = cnx.cursor()
    try:
        cursor.execute('INSERT INTO items (name, available) VALUES (%s, 0)', (name,))
        cnx.commit()
        update.message.reply_text(f"Item '{name}' added as not available.")
    except mysql.connector.IntegrityError:
        update.message.reply_text(f"Item '{name}' already exists in the inventory.")
    finally:
        cursor.close()
        cnx.close()

# Define a function to delete an item
@restricted
def delete_item(update, context):
    name = context.args[0]
    cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = cnx.cursor()
    cursor.execute('SELECT * FROM items WHERE name = %s', (name,))
    result = cursor.fetchone()
    if result is None:
        update.message.reply_text(f"Item '{name}' not found in the inventory.")
    else:
        cursor.execute('DELETE FROM items WHERE name = %s', (name,))
        cnx.commit()
        update.message.reply_text(f"Item '{name}' deleted.")
    cursor.close()
    cnx.close()

# Define a function to modify an item's availability
@restricted
def modify_item(update,context):
    name = context.args[0]
    availability = context.args[1]
    if availability.lower() == 'available':
        availability = 1
    elif availability.lower() == 'unavailable':
        availability = 0
    else:
        update.message.reply_text("Please specify 'available or 'unavailable'.")
        return
    cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = cnx.cursor()
    cursor.execute('UPDATE items SET available = %s WHERE name = %s', (availability, name))
    cnx.commit()
    update.message.reply_text(f"Item '{name}' availability updated.")
    cursor.close()
    cnx.close()

# Define a function to handle the /check command
def check_command(update, context):
    name = context.args[0]
    cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = cnx.cursor()
    result = check_item(name, cursor)
    cursor.close()
    cnx.close()
    update.message.reply_text(result, parse_mode=ParseMode.HTML)

# Define a function to handle the /list command
def list_command(update, context):
    cnx = mysql.connector.connect(host=DB_HOST, user=DB_USER, password=DB_PASSWORD, database=DB_NAME)
    cursor = cnx.cursor()
    cursor.execute('SELECT name, available FROM items')
    items = cursor.fetchall()
    if not items:
        update.message.reply_text("The inventory is empty.")
    else:
        status = "\n".join([f"{name}: {'Available' if available else 'Not available'}"
                            for (name, available) in items])
        update.message.reply_text(status, parse_mode=ParseMode.HTML)

# Define a function to handle the /help command
def help_command(update, context):
    help_text = "The following commands are available:\n" \
                "/check <item name> - Check the availability of an item.\n" \
                "/list - Show the status of all items in the inventory.\n" \
                
    update.message.reply_text(help_text)

# Define a function to handle messages sent to the bot
def handle_message(update, context):
    text = update.message.text

    if text.startswith('/check'):
        check_command(update, context)
    elif text.startswith('/add'):
        add_item(update, context)
    elif text.startswith('/delete'):
        delete_item(update, context)
    elif textHere.startswith('/modify'):
        modify_item(update, context)
    elif text.startswith('/list'):
        list_command(update, context)
    elif text.startswith('/help'):
        help_command(update, context)
    else:
        update.message.reply_text("Sorry, I don't understand this command.")



def start_bot():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # Define a function to send a welcome message
    def send_welcome(update, context):
        user_name = update.message.from_user.first_name
        welcome_message = f"Hello {user_name}! Welcome to the inventory bot. Use /help to see a list of available commands."
        update.message.reply_text(welcome_message)

    # Add a handler for the /start command
    dp.add_handler(CommandHandler("start", send_welcome))

    # Add a handler for the "new_chat_members" event
    dp.add_handler(MessageHandler(Filters.status_update.new_chat_members, send_welcome))

    # Add handlers for the other commands
    dp.add_handler(CommandHandler("check", check_command))
    dp.add_handler(CommandHandler("add", add_item))
    dp.add_handler(CommandHandler("delete", delete_item))
    dp.add_handler(CommandHandler("modify", modify_item))
    dp.add_handler(CommandHandler("list", list_command))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(MessageHandler(Filters.text, handle_message))

    # Start the bot
    updater.start_polling()
    print("Bot started.")
    
# Call the main function to start the bot
if __name__ == '__main__':
    start_bot()